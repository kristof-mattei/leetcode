# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  # each new commit to a PR runs this workflow
  # so we need to avoid a long running older one from overwriting the "pr-<number>-latest"
  group: "${{ github.workflow }} @ ${{ github.ref_name }}"
  cancel-in-progress: true

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  CARGO_FEATURES: --all-features
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_VARIANTS: |-
    arm64
    amd64
    amd64/v2
    amd64/v3
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  RUSTFLAGS: --deny=warnings

jobs:
  architectures:
    name: Build matrix
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.matrix.outputs.architectures }}
    steps:
      - name: Build matrix
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        id: matrix
        with:
          script: |
            const architectures = process.env.IMAGE_VARIANTS.trim().split("\n").map((a) => a.trim());

            const json = JSON.stringify(architectures);

            core.setOutput("architectures", json);

  repo-has-container:
    name: Repo has container?
    runs-on: ubuntu-latest
    outputs:
      has_container: ${{ steps.determine.outputs.has_container }}
    steps:
      - name: Repo has docker container?
        shell: bash
        id: determine
        run: |
          has_container="${{ vars.HAS_CONTAINER }}"
          echo "has_container=${has_container:-false}" >> ${GITHUB_OUTPUT}

  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      code: ${{ steps.filter.outputs.code }}
    steps:
      - &checkout
        name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          show-progress: false

      - name: Check if we actually made changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: .github/file-filters.yml

  calculate-version:
    name: Calculate version
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs:
      - changes
      - repo-has-container
    outputs:
      version: ${{ steps.version.outputs.version }}
    if: |
      github.event_name == 'pull_request' &&
      fromJSON(needs.repo-has-container.outputs.has_container) == true &&
      fromJSON(needs.changes.outputs.code) == true
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          show-progress: false
          fetch-depth: 0

      # when updating this, ensure you update the `Cache cargo` step in the `docker-build` job
      - &cache_cargo
        name: Cache cargo
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        env:
          CACHE_NAME: cargo
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-

      - &set_up_mold
        name: Set up mold
        uses: rui314/setup-mold@725a8794d15fc7563f59595bd9556495c0564878 # v1

      - &set_up_toolchain
        name: Set up toolchain
        shell: bash
        run: |
          rm ${HOME}/.cargo/bin/cargo-fmt
          rm ${HOME}/.cargo/bin/rust-analyzer
          rm ${HOME}/.cargo/bin/rustfmt

          rustup self update
          rustup update
          rustup show active-toolchain || rustup toolchain install
          rustup show

          cargo --version

      - &get_binstall
        name: Get binstall
        shell: bash
        working-directory: /tmp
        run: |
          case ${{ runner.arch }} in
            X64)
              full_platform="x86_64"
              ;;
            ARM64)
              full_platform="aarch64"
              ;;
          esac

          archive="cargo-binstall-${full_platform}-unknown-linux-musl.tgz"
          wget \
            --output-document=- \
            --timeout=10 \
            --waitretry=3 \
            --retry-connrefused \
            --progress=dot:mega \
            "https://github.com/cargo-bins/cargo-binstall/releases/latest/download/${archive}" \
            | tar \
                --directory=${HOME}/.cargo/bin/ \
                --strip-components=0 \
                --no-overwrite-dir \
                --extract \
                --verbose \
                --gunzip \
                --file=-

      - name: Install git-cliff to generate changelog & next version number
        shell: bash
        run: |
          cargo binstall --github-token ${{ secrets.GITHUB_TOKEN }} --no-confirm git-cliff

      - name: Calculate next version
        shell: bash
        id: version
        run: |
          version=$(git-cliff --bumped-version --unreleased --github-token ${{ secrets.GITHUB_TOKEN }})

          # remove v
          version="${version//v/}"

          # store
          echo "version=${VERSION}" >> ${GITHUB_OUTPUT}

  cargo-build:
    name: Cargo build
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      github.event_name == 'pull_request' &&
      fromJSON(needs.changes.outputs.code) == true
    steps:
      - *checkout

      - *cache_cargo

      - &cache_target
        name: Cache target
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        env:
          CACHE_NAME: target
        with:
          path: |
            ./target
          key: ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-

      - *set_up_mold

      - *set_up_toolchain

      - name: Build
        shell: bash
        run: |
          cargo build ${{ env.CARGO_FEATURES }} --all-targets --locked --workspace --verbose

  cargo-fmt:
    name: Cargo fmt
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      github.event_name == 'pull_request' &&
      fromJSON(needs.changes.outputs.code) == true
    steps:
      - *checkout

      - *cache_cargo

      - *set_up_mold

      - *set_up_toolchain

      - name: Install rustfmt
        shell: bash
        run: |
          rustup component add rustfmt

          # restore symlinks
          rustup update

      - name: Check formatting
        shell: bash
        run: |
          cargo fmt --all -- --check --verbose

  cargo-test-and-report:
    name: Cargo test (and report)
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - *checkout

      - *cache_cargo

      - *cache_target

      - *set_up_mold

      - *set_up_toolchain

      - name: Install llvm-tools
        shell: bash
        run: |
          rustup component add llvm-tools

          # restore symlinks
          rustup update

      - *get_binstall

      - name: Install nextest, custom test runner, with native support for junit and grcov
        shell: bash
        run: |
          cargo binstall --github-token ${{ secrets.GITHUB_TOKEN }} --no-confirm cargo-nextest grcov

      - name: Build with instrumentation support
        shell: bash
        env:
          RUSTFLAGS: "${{ env.RUSTFLAGS }} --allow=warnings -Cinstrument-coverage"
          # build-* ones are not parsed by grcov
          LLVM_PROFILE_FILE: "profiling/build-%p-%m.profraw"
        run: |
          cargo build ${{ env.CARGO_FEATURES }} --all-targets --locked --workspace --verbose

      - name: Run nextest
        shell: bash
        id: tests
        env:
          RUSTFLAGS: "${{ env.RUSTFLAGS }} --allow=warnings -Cinstrument-coverage"
          LLVM_PROFILE_FILE: "profiling/profile-%p-%m.profraw"
        run: |
          cargo nextest run --profile ci --no-fail-fast ${{ env.CARGO_FEATURES }} --all-targets --workspace
        continue-on-error: true

      - name: Upload test results
        uses: EnricoMi/publish-unit-test-result-action@3a74b2957438d0b6e2e61d67b05318aa25c9e6c6 # v2.20.0
        with:
          check_name: Test results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            reports/results.xml

      - name: Run grcov
        shell: bash
        run: |
          grcov $(find . -name "profile-*.profraw" -print) \
            --binary-path ./target/debug/ \
            --branch \
            --ignore-not-existing \
            --keep-only "src/**" \
            --llvm \
            --output-path ./reports/lcov.info \
            --output-type lcov \
            --source-dir .

      - name: Upload coverage results (to Codecov.io)
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          disable_search: true
          disable_telem: true
          fail_ci_if_error: true
          files: reports/lcov.info
          plugins: ""
          use_oidc: true

      - name: Upload test results to Codecov
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
        with:
          disable_search: true
          # doesn't exist here... yet
          # disable_telem: true
          fail_ci_if_error: true
          files: reports/results.xml
          use_oidc: true

      - name: Fail if tests failed
        shell: bash
        if: |
          steps.tests.outcome != 'success'
        run: |
          # the test reporter we use (or any for that matter)
          # all show a report. But we cannot depend on that report because
          # we don't know which subsection it belongs in GitHub
          # so we explicitly fail this one
          # which will fail All Done
          exit 1

  cargo-clippy-and-report:
    name: Cargo clippy (and report)
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      github.event_name == 'pull_request' &&
      fromJSON(needs.changes.outputs.code) == true
    steps:
      - *checkout

      - *cache_cargo

      - *cache_target

      - *set_up_mold

      - *set_up_toolchain

      - name: Run Clippy for GitHub Actions report
        uses: actions-rs-plus/clippy-check@fe8905c5766416f0593a503a2230a7c83141a8f0 # v2.3.0
        with:
          args: ${{ env.CARGO_FEATURES }} --all-targets --locked --workspace --verbose

  prebuild-cargo-edit-cargo-get:
    name: Prebuild cargo-edit and cargo-get for ${{ matrix.runs-on }}
    strategy:
      matrix:
        runs-on:
          - "ubuntu-latest"
          - "ubuntu-24.04-arm"
    runs-on: ${{ matrix.runs-on }}
    steps:
      - *checkout

      - *cache_cargo

      - *set_up_mold

      - *set_up_toolchain

      - *get_binstall

      - name: Install cargo-edit to do set-version, and cargo-get to get the description
        shell: bash
        run: |
          cargo binstall --github-token ${{ secrets.GITHUB_TOKEN }} --no-confirm cargo-edit cargo-get

  # this name is also used in `publish-crate-after-release.yml`
  docker-build:
    name: Build Docker container on ${{ matrix.runs-on }} for ${{ matrix.platform }}
    strategy:
      matrix:
        runs-on:
          - "ubuntu-latest"
          - "ubuntu-24.04-arm"
        platform: ${{ fromJSON(needs.architectures.outputs.architectures) }}
    outputs:
      application_name: ${{ steps.variables.outputs.application_name }}
      description: ${{ steps.variables.outputs.description }}
      full_image_name_remote_registry: ${{ steps.variables.outputs.full_image_name_remote_registry }}
      full_image_name_local_registry: ${{ steps.variables.outputs.full_image_name_local_registry }}
      registry: ${{ steps.variables.outputs.registry }}
      unique_tag: ${{ steps.variables.outputs.unique_tag }}
    runs-on: ${{ matrix.runs-on }}
    permissions:
      contents: read
      packages: write
    needs:
      - calculate-version
      - architectures
      # ensures cache of cargo-edit and cargo-get
      - prebuild-cargo-edit-cargo-get
    # if:
    # ... is not needed because calculate-version will not run if we disable building the docker container
    steps:
      - *checkout

      - name: Cache cargo
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        env:
          CACHE_NAME: cargo
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-${{ github.job }}
          # deviation from standard `*cache_cargo`, we want the cache from `prebuild-cargo-edit-cargo-get`
          # as that one prebuilds it for us
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-prebuild-cargo-edit-cargo-get
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-

      - *set_up_mold

      - *set_up_toolchain

      - *get_binstall

      - name: Install cargo-edit to do set-version, and cargo-get to get the description
        shell: bash
        run: |
          cargo binstall --github-token ${{ secrets.GITHUB_TOKEN }} --no-confirm cargo-edit cargo-get

      - name: Set the Cargo.toml version before we copy in the data into the Docker container
        shell: bash
        run: |
          cargo set-version ${{ needs.calculate-version.outputs.version }}

      # TODO validate no changes between github.event.pull_request.head.sha and the actual current sha (representing the hypothetical merge)
      - name: Set variables
        shell: bash
        id: variables
        run: |
          # This is the unique docker tag
          unique_tag=pr-${{ github.event.pull_request.base.sha }}-${{ github.event.pull_request.head.sha }}
          echo "unique_tag=${unique_tag}" >> ${GITHUB_OUTPUT}

          # remove slashes from platform (`amd64/v3` -> `amd64-v3`)
          platform_no_slashes=${{ matrix.platform }}
          platform_no_slashes=${platform_no_slashes//\//-}
          echo "platform_no_slashes=${platform_no_slashes}" >> ${GITHUB_OUTPUT}

          # but we're only building 1 arch here, so we need to identify that container (we'll merge them later)
          unique_tag_arch=${unique_tag}-${platform_no_slashes}
          echo "unique_tag_arch=${unique_tag_arch}" >> ${GITHUB_OUTPUT}

          # The application name, used in the Dockerfile
          application_name=${{ env.IMAGE_NAME }}
          # split at the last / and keep that (kristof-mattei/repo-name -> repo-name)
          application_name=${application_name##*/}
          # lowercase
          application_name=${application_name,,}
          echo "application_name=${application_name}" >> ${GITHUB_OUTPUT}

          # The registry to which we'll push
          registry=${{ env.REGISTRY }}
          registry=${registry,,}
          echo "registry=${registry}" >> ${GITHUB_OUTPUT}

          # The final full image name, which is the registry, the owner and the repo name
          image_name=${{ env.IMAGE_NAME }}
          image_name=${image_name,,}
          echo "full_image_name_remote_registry=${registry}/${image_name}" >> ${GITHUB_OUTPUT}

          # The local registry to which we'll push
          local_registry=localhost:5000
          local_registry=${local_registry,,}
          echo "full_image_name_local_registry=${local_registry}/${image_name}" >> ${GITHUB_OUTPUT}

          # The application's description, from Cargo.toml
          description=$(cargo get package.description)
          echo "description=${description}" >> ${GITHUB_OUTPUT}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        id: meta
        with:
          labels: |
            org.opencontainers.image.description=${{ steps.variables.outputs.description }} (${{ matrix.platform }})
            org.opencontainers.image.revision=${{ github.event.pull_request.base.sha }}-${{ github.event.pull_request.head.sha }}
            org.opencontainers.image.source=${{ github.event.pull_request.html_url }}
            org.opencontainers.image.version=pr-${{ github.event.number }}
          images: ${{ steps.variables.outputs.full_image_name_local_registry }}
          tags: |
            type=raw,value=${{ steps.variables.outputs.unique_tag_arch }}

      - name: Log into registry ${{ steps.variables.outputs.registry }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ steps.variables.outputs.registry }}
          username: ${{ github.actor }}

      - name: Should we set up QEMU?
        shell: bash
        id: setup_qemu
        run: |
          base_platform="${{ matrix.platform }}"

          if ! dpkg-architecture --equal "${base_platform%/*}"; then
            echo "setup_qemu=true" >> ${GITHUB_OUTPUT}
          else
            echo "setup_qemu=false" >> ${GITHUB_OUTPUT}
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        if: fromJSON(steps.setup_qemu.outputs.setup_qemu) == true
        with:
          platforms: linux/${{ matrix.platform }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Build Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          build-args: |
            APPLICATION_NAME=${{ steps.variables.outputs.application_name }}
          context: .
          # this container is THE PR's artifact, and we will re-tag it
          # once the PR has been accepted
          cache-from: type=registry,ref=${{ steps.variables.outputs.full_image_name_remote_registry }}-cache:${{ steps.variables.outputs.application_name }}-buildcache-${{ runner.arch }}-${{ steps.variables.outputs.platform_no_slashes }}
          cache-to: type=registry,ref=${{ steps.variables.outputs.full_image_name_remote_registry }}-cache:${{ steps.variables.outputs.application_name }}-buildcache-${{ runner.arch }}-${{ steps.variables.outputs.platform_no_slashes }},mode=max
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=oci,dest=/tmp/${{ steps.variables.outputs.unique_tag_arch }}.tar
          platforms: linux/${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: |
          matrix.runs-on == 'ubuntu-latest'
        with:
          if-no-files-found: error
          name: container-${{ steps.variables.outputs.application_name }}-${{ steps.variables.outputs.platform_no_slashes }}
          path: /tmp/${{ steps.variables.outputs.unique_tag_arch }}.tar
          retention-days: 1

  docker-publish:
    name: Publish Docker container
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:3@sha256:3725021071ec9383eb3d87ddbdff9ed602439b3f7c958c9c2fb941049ea6531d
        ports:
          - 5000:5000
    permissions:
      attestations: write
      id-token: write
      packages: write
    needs:
      - cargo-build
      - cargo-clippy-and-report
      - cargo-fmt
      - cargo-test-and-report
      - docker-build
    # Check if the event is not triggered by a fork
    if: |
      github.event.pull_request.head.repo.full_name == github.repository &&
      github.event_name == 'pull_request'
    steps:
      - name: Set up Docker
        uses: docker/setup-docker-action@b60f85385d03ac8acfca6d9996982511d8620a19 # v4.3.0
        with:
          daemon-config: |
            {
              "features": {
                "containerd-snapshotter": true
              }
            }

      - name: Log into registry ${{ needs.docker-build.outputs.registry }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ needs.docker-build.outputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        id: meta
        with:
          images: ${{ needs.docker-build.outputs.full_image_name_remote_registry }}
          labels: |
            org.opencontainers.image.description=${{ needs.docker-build.outputs.description }}
            org.opencontainers.image.revision=${{ github.event.pull_request.base.sha }}-${{ github.event.pull_request.head.sha }}
            org.opencontainers.image.source=${{ github.event.pull_request.html_url }}
            org.opencontainers.image.version=pr-${{ github.event.number }}
          tags: |
            type=raw,value=${{ needs.docker-build.outputs.unique_tag }}
            type=ref,event=pr,suffix=-latest

      - name: Download artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        id: artifact
        with:
          merge-multiple: true
          path: /tmp/container/
          pattern: container-${{ needs.docker-build.outputs.application_name }}-*

      - name: Load individual platform images from artifacts & push to registry
        shell: bash
        working-directory: ${{ steps.artifact.outputs.download-path }}
        run: |
          platforms=()
          while IFS= read -r platform; do
            echo "Loading ${platform//\//-}:"
            docker load --input ./${{ needs.docker-build.outputs.unique_tag }}-${platform//\//-}.tar

            full_name_with_platform=${{ needs.docker-build.outputs.full_image_name_local_registry }}:${{ needs.docker-build.outputs.unique_tag }}-${platform//\//-}

            echo "Pushing ${platform//\//-}:"
            docker push $full_name_with_platform

            platforms+=("$full_name_with_platform")
          done <<< "${{ env.IMAGE_VARIANTS }}"

          new_labels=()
          while IFS= read -r label; do
            new_labels+=(--annotation)
            new_labels+=("index:${label}")
          done <<< "${{ steps.meta.outputs.labels }}"

          # merge the platform containers in a new multiplatform one
          # with the new labels, and push it to our local registry
          docker buildx imagetools create "${new_labels[@]}" --tag "${{ needs.docker-build.outputs.full_image_name_local_registry }}:${{ needs.docker-build.outputs.unique_tag }}" \
            "${platforms[@]}"

          echo "Inspecting ${{ needs.docker-build.outputs.full_image_name_local_registry }}:${{ needs.docker-build.outputs.unique_tag }}:"
          docker buildx imagetools inspect --raw ${{ needs.docker-build.outputs.full_image_name_local_registry }}:${{ needs.docker-build.outputs.unique_tag }}

      - name: Get digest of image in our local registry
        shell: bash
        id: local_image
        run: |
          digest=$(docker buildx imagetools inspect ${{ needs.docker-build.outputs.full_image_name_local_registry }}:${{ needs.docker-build.outputs.unique_tag }} --format "{{json .}}" | jq --raw-output ".manifest.digest")

          echo "digest=${digest}" >> ${GITHUB_OUTPUT}

      - name: Push from local registry to remote with new tags
        shell: bash
        run: |
          new_tags=()
          while IFS= read -r tag; do
            new_tags+=(--tag)
            new_tags+=(${tag})
          done <<< "${{ steps.meta.outputs.tags }}"

          docker buildx imagetools create "${new_tags[@]}" \
            ${{ needs.docker-build.outputs.full_image_name_local_registry }}:${{ needs.docker-build.outputs.unique_tag }}

          for new_tag in $(echo "${{ join(steps.meta.outputs.tags, ' ') }}"); do
            echo "Inspecting ${new_tag}:"
            docker buildx imagetools inspect --raw ${new_tag}
            # empty to get newline
            echo ""
          done

      # note that we use the digest of the local image
      # these digests don't change after pushing, but
      # since we deal with tags (mutable), and the way to get a digest is to use the tag, I prefer
      # sourcing the digest from the local registry we just spun up (trusted)
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        id: attestation
        with:
          subject-name: ${{ needs.docker-build.outputs.full_image_name_remote_registry }}
          subject-digest: ${{ steps.local_image.outputs.digest }}
          push-to-registry: true

  all-done:
    name: All done
    # this is the job that should be marked as required on GitHub. It's the only one that'll reliably trigger
    # when any upstream fails: success
    # when all upstream skips: pass
    # when all upstream success: success
    # combination of upstream skip and success: success
    runs-on: ubuntu-latest
    needs:
      - calculate-version
      - cargo-build
      - cargo-clippy-and-report
      - cargo-fmt
      - cargo-test-and-report
      - docker-build
      - docker-publish
    if: |
      always()
    steps:
      - name: Fail!
        shell: bash
        if: |
          contains(needs.*.result, 'failure') ||
          contains(needs.*.result, 'cancelled')
        run: |
          echo "One / more upstream failed or was cancelled. Failing job..."

          exit 1

      - name: Success!
        shell: bash
        run: |
          echo "Great success!"
