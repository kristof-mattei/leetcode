# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  # each new commit to a PR runs this workflow
  # so we need to avoid a long running older one from overwriting the "pr-<number>-latest"
  group: "${{ github.workflow }} @ ${{ github.ref_name }}"
  cancel-in-progress: true

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  # set this to true in GitHub variables to enable building the container
  # HAS_CONTAINER: true
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  RUSTFLAGS: --deny=warnings

jobs:
  repo-has-container:
    name: Repo has container?
    runs-on: ubuntu-latest
    outputs:
      has_container: ${{ steps.determine.outputs.has_container }}

    steps:
      - name: Repo has docker container?
        shell: bash
        id: determine
        run: |
          has_container="${{ vars.HAS_CONTAINER }}"
          echo "has_container=${has_container:-false}" >> ${GITHUB_OUTPUT}

  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          show-progress: false

      - name: Check if we actually made changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: .github/file-filters.yml

  calculate-version:
    name: Calculate version
    runs-on: ubuntu-latest
    needs:
      - changes
      - repo-has-container
    outputs:
      version: ${{ steps.version.outputs.version }}
    if: |
      github.event_name == 'pull_request' &&
      fromJSON(needs.repo-has-container.outputs.has_container) == true &&
      fromJSON(needs.changes.outputs.code) == true
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          show-progress: false
          fetch-depth: 0

      - name: Cache dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo
            ./target
          key: ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cocogitto
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-

      - name: Set up mold
        uses: rui314/setup-mold@85c79d00377f0d32cdbae595a46de6f7c2fa6599 # v1

      - name: Set up toolchain
        shell: bash
        run: |
          rm ${HOME}/.cargo/bin/cargo-fmt
          rm ${HOME}/.cargo/bin/rust-analyzer
          rm ${HOME}/.cargo/bin/rustfmt

          rustup self update
          rustup update
          rustup show active-toolchain || rustup toolchain install
          rustup show

          cargo --version

      - name: Get binstall
        shell: bash
        working-directory: /tmp
        run: |
          archive="cargo-binstall-x86_64-unknown-linux-musl.tgz"
          wget \
            --output-document=- \
            --timeout=10 \
            --waitretry=3 \
            --retry-connrefused \
            --progress=dot:mega \
            "https://github.com/cargo-bins/cargo-binstall/releases/latest/download/${archive}" \
            | tar \
                --directory=${HOME}/.cargo/bin/ \
                --strip-components=0 \
                --no-overwrite-dir \
                --extract \
                --verbose \
                --gunzip \
                --file=-

      - name: Install cocogitto to get the next version number
        shell: bash
        run: |
          cargo binstall --no-confirm cocogitto

      - name: Calculate next version
        shell: bash
        id: version
        run: |
          version="$(cog bump --auto --dry-run || true)"

          if [[ "${version}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "New version: ${version}"
          else
              version="v$(cog -v get-version)"

              echo "No version generated, defaulting to latest tag: ${version}"
          fi

          # remove v
          version="${version//v/}"

          # store
          echo "version=${VERSION}" >> ${GITHUB_OUTPUT}

  cargo-build:
    name: Cargo build
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      github.event_name == 'pull_request' &&
      fromJSON(needs.changes.outputs.code) == true
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          show-progress: false

      - name: Cache dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo
            ./target
          key: ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-build
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-

      - name: Set up mold
        uses: rui314/setup-mold@85c79d00377f0d32cdbae595a46de6f7c2fa6599 # v1

      - name: Set up toolchain
        shell: bash
        run: |
          rm ${HOME}/.cargo/bin/cargo-fmt
          rm ${HOME}/.cargo/bin/rust-analyzer
          rm ${HOME}/.cargo/bin/rustfmt

          rustup self update
          rustup update
          rustup show active-toolchain || rustup toolchain install
          rustup show

          cargo --version

      - name: Build
        shell: bash
        run: |
          cargo build --all-features --all-targets --locked --workspace --verbose

  cargo-fmt:
    name: Cargo fmt
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      github.event_name == 'pull_request' &&
      fromJSON(needs.changes.outputs.code) == true
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          show-progress: false

      - name: Cache dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo
            ./target
          key: ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-fmt
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-

      - name: Set up mold
        uses: rui314/setup-mold@85c79d00377f0d32cdbae595a46de6f7c2fa6599 # v1

      - name: Set up toolchain
        shell: bash
        run: |
          rm ${HOME}/.cargo/bin/cargo-fmt
          rm ${HOME}/.cargo/bin/rust-analyzer
          rm ${HOME}/.cargo/bin/rustfmt

          rustup self update
          rustup update
          rustup show active-toolchain || rustup toolchain install
          rustup show

          cargo --version

      - name: Install rustfmt
        shell: bash
        run: |
          rustup component add rustfmt

          # restore symlinks
          rustup update

      - name: Check formatting
        shell: bash
        run: |
          cargo fmt --all -- --check --verbose

  cargo-test-and-report:
    name: Cargo test (and report)
    runs-on: ubuntu-latest
    permissions:
      checks: write
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          show-progress: false

      - name: Cache dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo
            ./target
          key: ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-test
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-

      - name: Set up mold
        uses: rui314/setup-mold@85c79d00377f0d32cdbae595a46de6f7c2fa6599 # v1

      - name: Set up toolchain
        shell: bash
        run: |
          rm ${HOME}/.cargo/bin/cargo-fmt
          rm ${HOME}/.cargo/bin/rust-analyzer
          rm ${HOME}/.cargo/bin/rustfmt

          rustup self update
          rustup update
          rustup show active-toolchain || rustup toolchain install
          rustup show

          cargo --version

      - name: Install llvm-tools
        shell: bash
        run: |
          rustup component add llvm-tools

          # restore symlinks
          rustup update

      - name: Get binstall
        shell: bash
        working-directory: /tmp
        run: |
          archive="cargo-binstall-x86_64-unknown-linux-musl.tgz"
          wget \
            --output-document=- \
            --timeout=10 \
            --waitretry=3 \
            --retry-connrefused \
            --progress=dot:mega \
            "https://github.com/cargo-bins/cargo-binstall/releases/latest/download/${archive}" \
            | tar \
                --directory=${HOME}/.cargo/bin/ \
                --strip-components=0 \
                --no-overwrite-dir \
                --extract \
                --verbose \
                --gunzip \
                --file=-

      - name: Install nextest, custom test runner, with native support for junit and grcov
        shell: bash
        run: |
          cargo binstall --no-confirm cargo-nextest grcov

      - name: Build with instrumentation support
        shell: bash
        env:
          RUSTFLAGS: "${{ env.RUSTFLAGS }} --allow=warnings -Cinstrument-coverage"
          # build-* ones are not parsed by grcov
          LLVM_PROFILE_FILE: "profiling/build-%p-%m.profraw"
        run: |
          cargo build --all-features --all-targets --locked --workspace --verbose

      - name: Run nextest
        shell: bash
        id: tests
        env:
          RUSTFLAGS: "${{ env.RUSTFLAGS }} --allow=warnings -Cinstrument-coverage"
          LLVM_PROFILE_FILE: "profiling/profile-%p-%m.profraw"
        run: |
          cargo nextest run --profile ci --no-fail-fast --all-targets --all-features --workspace
        continue-on-error: true

      - name: Upload test results
        uses: EnricoMi/publish-unit-test-result-action@3a74b2957438d0b6e2e61d67b05318aa25c9e6c6 # v2.20.0
        with:
          check_name: Test results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            reports/results.xml

      - name: Run grcov
        shell: bash
        run: |
          grcov $(find . -name "profile-*.profraw" -print) \
            --binary-path ./target/debug/ \
            --branch \
            --ignore-not-existing \
            --keep-only "src/**" \
            --llvm \
            --output-path ./reports/lcov.info \
            --output-type lcov \
            --source-dir .

      - name: Upload coverage results (to Codecov.io)
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          disable_search: true
          disable_telem: true
          fail_ci_if_error: true
          files: reports/lcov.info
          plugins: ""
          use_oidc: true

      - name: Upload test results to Codecov
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
        with:
          disable_search: true
          # doesn't exist here... yet
          # disable_telem: true
          fail_ci_if_error: true
          files: reports/results.xml
          use_oidc: true

      - name: Fail if tests failed
        shell: bash
        if: |
          steps.tests.outcome != 'success'
        run: |
          # the test reporter we use (or any for that matter)
          # all show a report. But we cannot depend on that report because
          # we don't know which subsection it belongs in GitHub
          # so we explicitly fail this one
          # which will fail All Done
          exit 1

  cargo-clippy-and-report:
    name: Cargo clippy (and report)
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      github.event_name == 'pull_request' &&
      fromJSON(needs.changes.outputs.code) == true
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          show-progress: false

      - name: Cache dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo
            ./target
          key: ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-clippy
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-

      - name: Set up mold
        uses: rui314/setup-mold@85c79d00377f0d32cdbae595a46de6f7c2fa6599 # v1

      - name: Set up toolchain
        shell: bash
        run: |
          rm ${HOME}/.cargo/bin/cargo-fmt
          rm ${HOME}/.cargo/bin/rust-analyzer
          rm ${HOME}/.cargo/bin/rustfmt

          rustup self update
          rustup update
          rustup show active-toolchain || rustup toolchain install
          rustup show

          cargo --version

      - name: Run Clippy for GitHub Actions report
        uses: actions-rs-plus/clippy-check@fe8905c5766416f0593a503a2230a7c83141a8f0 # v2.3.0
        with:
          args: --all-features --all-targets --locked --workspace --verbose

  docker-build:
    name: Build Docker container on ${{ matrix.runs-on }} for ${{ matrix.platform }}
    strategy:
      matrix:
        runs-on:
          - "ubuntu-latest"
          - "ubuntu-24.04-arm"
        platform:
          - "amd64"
          - "arm64"
    outputs:
      application_name: ${{ steps.variables.outputs.application_name }}
      description: ${{ steps.variables.outputs.description }}
      full_image_name_remote_registry: ${{ steps.variables.outputs.full_image_name_remote_registry }}
      full_image_name_local_registry: ${{ steps.variables.outputs.full_image_name_local_registry }}
      registry: ${{ steps.variables.outputs.registry }}
      unique_tag: ${{ steps.variables.outputs.unique_tag }}
    runs-on: ${{ matrix.runs-on }}
    permissions:
      packages: write
    needs:
      - calculate-version
    # if:
    # ... is not needed because calculate-version will not run if we disable building the docker container
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          show-progress: false

      - name: Cache dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo
            ./target
          key: ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-docker
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-

      - name: Set up mold
        uses: rui314/setup-mold@85c79d00377f0d32cdbae595a46de6f7c2fa6599 # v1

      - name: Set up toolchain
        shell: bash
        run: |
          rm ${HOME}/.cargo/bin/cargo-fmt
          rm ${HOME}/.cargo/bin/rust-analyzer
          rm ${HOME}/.cargo/bin/rustfmt

          rustup self update
          rustup update
          rustup show active-toolchain || rustup toolchain install
          rustup show

          cargo --version

      - name: Get binstall
        shell: bash
        working-directory: /tmp
        run: |
          case ${{ matrix.runs-on }} in
            ubuntu-latest)
              full_platform="x86_64"
              ;;
            ubuntu-24.04-arm)
              full_platform="aarch64"
              ;;
          esac

          archive="cargo-binstall-${full_platform}-unknown-linux-musl.tgz"
          wget \
            --output-document=- \
            --timeout=10 \
            --waitretry=3 \
            --retry-connrefused \
            --progress=dot:mega \
            "https://github.com/cargo-bins/cargo-binstall/releases/latest/download/${archive}" \
            | tar \
                --directory=${HOME}/.cargo/bin/ \
                --strip-components=0 \
                --no-overwrite-dir \
                --extract \
                --verbose \
                --gunzip \
                --file=-

      - name: Install cargo-edit to do set-version, and cargo-get to get the description
        shell: bash
        run: |
          cargo binstall --no-confirm cargo-edit cargo-get

      - name: Set the Cargo.toml version before we copy in the data into the Docker container
        shell: bash
        run: |
          cargo set-version ${{ needs.calculate-version.outputs.version }}

      # TODO validate no changes between github.event.pull_request.head.sha and the actual current sha (representing the hypothetical merge)
      - name: Set variables
        shell: bash
        id: variables
        run: |
          # This is the unique docker tag
          unique_tag=pr-${{ github.event.pull_request.base.sha }}-${{ github.event.pull_request.head.sha }}
          echo "unique_tag=${unique_tag}" >> ${GITHUB_OUTPUT}

          # but we're only building 1 arch here, so we need to identify that container (we'll merge them later)
          unique_tag_arch=${unique_tag}-${{ matrix.platform }}
          echo "unique_tag_arch=${unique_tag_arch}" >> ${GITHUB_OUTPUT}

          # The application name, used in the Dockerfile
          application_name=${{ env.IMAGE_NAME }}
          # split at the last / and keep that (kristof-mattei/repo-name -> repo-name)
          application_name=${application_name##*/}
          # lowercase
          application_name=${application_name,,}
          echo "application_name=${application_name}" >> ${GITHUB_OUTPUT}

          # The registry to which we'll push
          registry=${{ env.REGISTRY }}
          registry=${registry,,}
          echo "registry=${registry}" >> ${GITHUB_OUTPUT}

          # The final full image name, which is the registry, the owner and the repo name
          image_name=${{ env.IMAGE_NAME }}
          image_name=${image_name,,}
          echo "full_image_name_remote_registry=${registry}/${image_name}" >> ${GITHUB_OUTPUT}

          # The local registry to which we'll push
          local_registry=localhost:5000
          local_registry=${local_registry,,}
          echo "full_image_name_local_registry=${local_registry}/${image_name}" >> ${GITHUB_OUTPUT}

          # The application's description, from Cargo.toml
          description=$(cargo get package.description)
          echo "description=${description}" >> ${GITHUB_OUTPUT}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        id: meta
        with:
          labels: |
            org.opencontainers.image.description=${{ steps.variables.outputs.description }} (${{ matrix.platform }})
            org.opencontainers.image.revision=${{ github.event.pull_request.base.sha }}-${{ github.event.pull_request.head.sha }}
            org.opencontainers.image.source=${{ github.event.pull_request.html_url }}
            org.opencontainers.image.version=pr-${{ github.event.number }}
          images: ${{ steps.variables.outputs.full_image_name_local_registry }}
          tags: |
            type=raw,value=${{ steps.variables.outputs.unique_tag_arch }}

      - name: Log into registry ${{ steps.variables.outputs.registry }}
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ steps.variables.outputs.registry }}
          username: ${{ github.actor }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Build Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          build-args: |
            APPLICATION_NAME=${{ steps.variables.outputs.application_name }}
          context: .
          # this container is THE PR's artifact, and we will re-tag it
          # once the PR has been accepted
          cache-from: type=registry,ref=${{ steps.variables.outputs.full_image_name_remote_registry }}:buildcache-${{ runner.arch }}-${{ steps.variables.outputs.application_name }}-${{ matrix.platform }}
          cache-to: type=registry,ref=${{ steps.variables.outputs.full_image_name_remote_registry }}:buildcache-${{ runner.arch }}-${{ steps.variables.outputs.application_name }}-${{ matrix.platform }},mode=max
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=oci,dest=/tmp/${{ steps.variables.outputs.unique_tag_arch }}.tar
          platforms: linux/${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: |
          matrix.runs-on == 'ubuntu-latest'
        with:
          if-no-files-found: error
          name: container-${{ steps.variables.outputs.application_name }}-${{ matrix.platform }}
          path: /tmp/${{ steps.variables.outputs.unique_tag_arch }}.tar
          retention-days: 1

  docker-publish:
    name: Publish Docker container
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:3@sha256:1fc7de654f2ac1247f0b67e8a459e273b0993be7d2beda1f3f56fbf1001ed3e7
        ports:
          - 5000:5000
    permissions:
      attestations: write
      id-token: write
      packages: write
    needs:
      - cargo-build
      - cargo-clippy-and-report
      - cargo-fmt
      - cargo-test-and-report
      - docker-build
    # Check if the event is not triggered by a fork
    if: |
      github.event.pull_request.head.repo.full_name == github.repository &&
      github.event_name == 'pull_request'
    steps:
      - name: Set up Docker
        uses: docker/setup-docker-action@b60f85385d03ac8acfca6d9996982511d8620a19 # v4.3.0
        with:
          daemon-config: |
            {
              "features": {
                "containerd-snapshotter": true
              }
            }

      - name: Log into registry ${{ needs.docker-build.outputs.registry }}
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ needs.docker-build.outputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        id: meta
        with:
          labels: |
            org.opencontainers.image.description=${{ needs.docker-build.outputs.description }}
            org.opencontainers.image.revision=${{ github.event.pull_request.base.sha }}-${{ github.event.pull_request.head.sha }}
            org.opencontainers.image.source=${{ github.event.pull_request.html_url }}
            org.opencontainers.image.version=pr-${{ github.event.number }}
          images: ${{ needs.docker-build.outputs.full_image_name_local_registry }}
          tags: |
            type=raw,value=${{ needs.docker-build.outputs.unique_tag }}
            type=ref,event=pr,suffix=-latest

      - name: Download artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        id: artifact
        with:
          merge-multiple: true
          path: /tmp/container/
          pattern: container-${{ needs.docker-build.outputs.application_name }}-*

      - name: Load individual platform images from artifacts & push to registry
        shell: bash
        working-directory: ${{ steps.artifact.outputs.download-path }}
        run: |
          docker load --input ./${{ needs.docker-build.outputs.unique_tag }}-amd64.tar
          echo "Pushing amd64:"
          docker push ${{ needs.docker-build.outputs.full_image_name_local_registry }}:${{ needs.docker-build.outputs.unique_tag }}-amd64

          docker load --input ./${{ needs.docker-build.outputs.unique_tag }}-arm64.tar
          echo "Pushing arm64:"
          docker push ${{ needs.docker-build.outputs.full_image_name_local_registry }}:${{ needs.docker-build.outputs.unique_tag }}-arm64

      - name: Create multiplatform image
        shell: bash
        run: |
          new_tags=()
          while IFS= read -r tag; do
            new_tags+=(--tag)
            new_tags+=(${tag})
          done <<< "${{ steps.meta.outputs.tags }}"

          new_labels=()
          while IFS= read -r label; do
            new_labels+=(--annotation)
            new_labels+=("index:${label}")
          done <<< "${{ steps.meta.outputs.labels }}"

          # merge the amd64 and arm64 containers in a new multiplatform one
          docker buildx imagetools create "${new_tags[@]}" "${new_labels[@]}" \
            ${{ needs.docker-build.outputs.full_image_name_local_registry }}:${{ needs.docker-build.outputs.unique_tag }}-amd64 \
            ${{ needs.docker-build.outputs.full_image_name_local_registry }}:${{ needs.docker-build.outputs.unique_tag }}-arm64

          for new_tag in $(echo "${{ join(steps.meta.outputs.tags, ' ') }}"); do
            echo "${new_tag}:"
            docker buildx imagetools inspect --raw ${new_tag}
            # empty to get newline
            echo ""
          done

      - name: Get digest of multiplatform image in our local registry
        shell: bash
        id: multiplatform_image
        run: |
          digest=$(docker buildx imagetools inspect ${{ needs.docker-build.outputs.full_image_name_local_registry }}:${{ needs.docker-build.outputs.unique_tag }} --format "{{json .}}" | jq --raw-output ".manifest.digest")

          echo "digest=${digest}" >> ${GITHUB_OUTPUT}

      - name: Publish to the actual repo
        shell: bash
        run: |
          docker buildx imagetools create \
            --tag ${{ needs.docker-build.outputs.full_image_name_remote_registry }}:${{ needs.docker-build.outputs.unique_tag }} \
            ${{ needs.docker-build.outputs.full_image_name_local_registry }}:${{ needs.docker-build.outputs.unique_tag }}

      # note that we use the digest of the local image
      # these digests don't change after pushing, but
      # since we deal with tags (mutable), and the way to get a digest is to use the tag, I prefer
      # sourcing the digest from the local registry we just spun up (trusted)
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        id: attestation
        with:
          subject-name: ${{ needs.docker-build.outputs.full_image_name_remote_registry }}
          subject-digest: ${{ steps.multiplatform_image.outputs.digest }}
          push-to-registry: true

  all-done:
    name: All done
    # this is the job that should be marked as required on GitHub. It's the only one that'll reliably trigger
    # when any upstream fails: success
    # when all upstream skips: pass
    # when all upstream success: success
    # combination of upstream skip and success: success
    runs-on: ubuntu-latest
    needs:
      - calculate-version
      - cargo-build
      - cargo-clippy-and-report
      - cargo-fmt
      - cargo-test-and-report
      - docker-build
      - docker-publish
    if: |
      always()
    steps:
      - name: Fail!
        shell: bash
        if: |
          contains(needs.*.result, 'failure') ||
          contains(needs.*.result, 'cancelled')
        run: |
          echo "One / more upstream failed or was cancelled. Failing job..."

          exit 1

      - name: Success!
        shell: bash
        run: |
          echo "Great success!"
