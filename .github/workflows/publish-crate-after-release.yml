name: Publish crate

env: {}

concurrency:
  group: "${{ github.workflow }}"
  cancel-in-progress: false # last one must win in case of multiple releases

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: read

jobs:
  repo-has-crate:
    name: Repo publishes crate?
    runs-on: ubuntu-latest
    outputs:
      has_crate: ${{ steps.determine.outputs.has_crate }}

    steps:
      - name: Repo has crate?
        id: determine
        shell: bash
        run: |
          HAS_CRATE="${{ vars.HAS_CRATE }}"
          echo "has_crate=${HAS_CRATE:-false}" >> ${GITHUB_OUTPUT}

  publish-crate:
    name: Publish crate
    runs-on: ubuntu-latest
    needs:
      - repo-has-crate
    if: |
      fromJSON(needs.repo-has-crate.outputs.has_crate) == true
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          show-progress: false

      - name: Cache dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo
            ./target
          key: ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-test
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-${{ runner.arch }}-build-${{ env.CACHE_NAME }}-

      - name: Set up mold
        uses: rui314/setup-mold@e16410e7f8d9e167b74ad5697a9089a35126eb50 # v1

      - name: Set up toolchain
        shell: bash
        run: |
          rm ${HOME}/.cargo/bin/cargo-fmt
          rm ${HOME}/.cargo/bin/rust-analyzer
          rm ${HOME}/.cargo/bin/rustfmt

          rustup self update
          rustup update
          rustup show active-toolchain || rustup toolchain install
          rustup show

          cargo --version

      - name: Install cargo-edit to do set-version
        shell: bash
        run: |
          cargo install cargo-edit

      - name: Set version in Cargo.toml / Cargo.lock
        shell: bash
        id: version
        run: |
          VERSION="${{ github.ref_name }}"
          # remove v
          VERSION="${VERSION//v/}"

          # store
          cargo set-version ${VERSION}

          # debug
          cat Cargo.toml

      - name: Publish
        shell: bash
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # we don't commit the version number in our codebase
          cargo publish --allow-dirty
