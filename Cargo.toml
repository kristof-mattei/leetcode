[package]
name = "leetcode"
# don't change this, it's updated before an actual build by update-version.sh
version = "0.0.0-development"
edition = "2024"
rust-version = "1.89.0"
authors = ["Kristof Mattei"]
description = "Leetcode"
license = "MIT"
categories = ["playground"]
keywords = ["playground"]
repository = "https://github.com/kristof-mattei/leetcode"

[lints.clippy]
# don't stop from compiling / running
all = "warn"
cargo = "warn"
complexity = "warn"
correctness = "warn"
pedantic = "warn"
perf = "warn"
style = "warn"
suspicious = "warn"

# this one is WAY too buggy
assigning_clones = { level = "allow", priority = 127 }

# general things we don't care about when writing code for points
# as the input is narrowly defined
cast_possible_truncation = { level = "allow", priority = 127 }
cast_possible_wrap = { level = "allow", priority = 127 }
cast_sign_loss = { level = "allow", priority = 127 }

# yea, this one is debatable
too_many_lines = { level = "allow", priority = 127 }

# restriction

# Lib only
# alloc_instead_of_core = { level = "deny", priority = 127 }
# std_instead_of_alloc = { level = "deny", priority = 127 }
# std_instead_of_core = { level = "deny", priority = 127 }
# exhaustive_enums = { level = "deny", priority = 127 }
# exhaustive_structs = { level = "deny", priority = 127 }
# empty_enum_variants_with_brackets = { level = "deny", priority = 127 }
# empty_structs_with_brackets = { level = "deny", priority = 127 }
# missing_inline_in_public_items = { level = "deny", priority = 127 }

absolute_paths = { level = "deny", priority = 127 }
allow_attributes = { level = "deny", priority = 127 }
# Disabled in leetcode
# allow_attributes_without_reason = { level = "deny", priority = 127 }
# Debatable
# arithmetic_side_effects = { level = "deny", priority = 127 }
# Debatable
# as_conversions = { level = "deny", priority = 127 }
as_pointer_underscore = { level = "deny", priority = 127 }
as_underscore = { level = "deny", priority = 127 }
assertions_on_result_states = { level = "deny", priority = 127 }
big_endian_bytes = { level = "deny", priority = 127 }
cfg_not_test = { level = "deny", priority = 127 }
# ensure we do Arc::clone(&arc) instead of arc.clone()
clone_on_ref_ptr = { level = "deny", priority = 127 }
create_dir = { level = "deny", priority = 127 }
dbg_macro = { level = "deny", priority = 127 }
# Disabled in leetcode
# decimal_literal_representation = { level = "deny", priority = 127 }
# Debatable
# default_numeric_fallback = { level = "deny", priority = 127 }
default_union_representation = { level = "deny", priority = 127 }
deref_by_slicing = { level = "deny", priority = 127 }
doc_include_without_cfg = { level = "deny", priority = 127 }
else_if_without_else = { level = "deny", priority = 127 }
empty_drop = { level = "deny", priority = 127 }
error_impl_error = { level = "deny", priority = 127 }
exit = { level = "deny", priority = 127 }
field_scoped_visibility_modifiers = { level = "deny", priority = 127 }
filetype_is_file = { level = "deny", priority = 127 }
# Debatable
# float_arithmetic = { level = "deny", priority = 127 }
float_cmp_const = { level = "deny", priority = 127 }
fn_to_numeric_cast_any = { level = "deny", priority = 127 }
# Debatable
# get_unwrap = { level = "deny", priority = 127 }
host_endian_bytes = { level = "deny", priority = 127 }
# Debatable
# if_then_some_else_none = { level = "deny", priority = 127 }
impl_trait_in_params = { level = "deny", priority = 127 }
# Debatable
# indexing_slicing = { level = "deny", priority = 127 }
infinite_loop = { level = "deny", priority = 127 }
inline_asm_x86_att_syntax = { level = "deny", priority = 127 }
# Debatable
# integer_division = { level = "deny", priority = 127 }
# Debatable
# integer_division_remainder_used = { level = "deny", priority = 127 }
large_include_file = { level = "deny", priority = 127 }
let_underscore_must_use = { level = "deny", priority = 127 }
let_underscore_untyped = { level = "deny", priority = 127 }
little_endian_bytes = { level = "deny", priority = 127 }
lossy_float_literal = { level = "deny", priority = 127 }
# Debatable
# map_err_ignore = { level = "deny", priority = 127 }
map_with_unused_argument_over_ranges = { level = "deny", priority = 127 }
# Disabled in leetcode
# missing_assert_message = { level = "deny", priority = 127 }
mixed_read_write_in_expression = { level = "deny", priority = 127 }
mod_module_files = { level = "deny", priority = 127 }
# Debatable
# module_name_repetitions = { level = "deny", priority = 127 }
# Disabled in leetcode
# modulo_arithmetic = { level = "deny", priority = 127 }
multiple_inherent_impl = { level = "deny", priority = 127 }
multiple_unsafe_ops_per_block = { level = "deny", priority = 127 }
mutex_atomic = { level = "deny", priority = 127 }
mutex_integer = { level = "deny", priority = 127 }
needless_raw_strings = { level = "deny", priority = 127 }
non_ascii_literal = { level = "deny", priority = 127 }
non_zero_suggestions = { level = "deny", priority = 127 }
panic_in_result_fn = { level = "deny", priority = 127 }
# Debatable
# partial_pub_fields = { level = "deny", priority = 127 }
pattern_type_mismatch = { level = "deny", priority = 127 }
precedence_bits = { level = "deny", priority = 127 }
# Debatable
# print_stderr = { level = "deny", priority = 127 }
# Debatable
# print_stdout = { level = "deny", priority = 127 }
pub_without_shorthand = { level = "deny", priority = 127 }
rc_buffer = { level = "deny", priority = 127 }
rc_mutex = { level = "deny", priority = 127 }
# Disabled
# redundant_test_prefix = { level = "deny", priority = 127 }
renamed_function_params = { level = "deny", priority = 127 }
rest_pat_in_fully_bound_structs = { level = "deny", priority = 127 }
return_and_then = { level = "deny", priority = 127 }
# Debatable, need to think about it
# same_name_method = { level = "deny", priority = 127 }
semicolon_inside_block = { level = "deny", priority = 127 }
# Debatable
# shadow_reuse = { level = "deny", priority = 127 }
# Debatable
# shadow_same = { level = "deny", priority = 127 }
# Debatable
# shadow_unrelated = { level = "deny", priority = 127 }
str_to_string = { level = "deny", priority = 127 }
string_add = { level = "deny", priority = 127 }
string_lit_chars_any = { level = "deny", priority = 127 }
# Debatable, but no
# string_slice = { level = "deny", priority = 127 }
string_to_string = { level = "deny", priority = 127 }
suspicious_xor_used_as_pow = { level = "deny", priority = 127 }
tests_outside_test_module = { level = "deny", priority = 127 }
todo = { level = "deny", priority = 127 }
try_err = { level = "deny", priority = 127 }
undocumented_unsafe_blocks = { level = "deny", priority = 127 }
unimplemented = { level = "deny", priority = 127 }
unnecessary_safety_comment = { level = "deny", priority = 127 }
unnecessary_safety_doc = { level = "deny", priority = 127 }
unnecessary_self_imports = { level = "deny", priority = 127 }
unneeded_field_pattern = { level = "deny", priority = 127 }
unseparated_literal_suffix = { level = "deny", priority = 127 }
unused_result_ok = { level = "deny", priority = 127 }
unused_trait_names = { level = "deny", priority = 127 }
verbose_file_reads = { level = "deny", priority = 127 }
wildcard_enum_match_arm = { level = "deny", priority = 127 }

# end restriction

# this has 0 performance implications, the binding is compiled away, and it could cause issues
# when done blindly, plus it makes it harder to debug as you cannot put breakpoints on return
# values of functions (yet)
let_and_return = { level = "allow", priority = 127 }

# nothing we can do about multiple crate versions, so this lint just creates noise
multiple_crate_versions = { level = "allow", priority = 127 }

# this one is debatable. continue is used in places to be explicit, and to guard against
# issues when refactoring
needless_continue = { level = "allow", priority = 127 }

# fights with `pattern_type_mismatch`
needless_borrowed_reference = { level = "allow", priority = 127 }

# Conflicts with `else_if_without_else`
redundant_else = { level = "allow", priority = 127 }

# this one causes confusion when combining variables (`foo`) and
# dereferenced variables (`foo.bar`). The latter cannot be inlined
# so we don't inline anything
uninlined-format-args = { level = "allow", priority = 127 }

[lints.rust]
let_underscore_drop = { level = "deny", priority = 127 }
non_ascii_idents = { level = "deny", priority = 127 }
