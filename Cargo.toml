[package]
name = "leetcode"
# don't change this, it's updated before an actual build by update-version.sh
version = "0.0.0-development"
edition = "2024"
rust-version = "1.87.0"
authors = ["Kristof Mattei"]
description = "Leetcode"
license-file = "LICENSE"
categories = ["playground"]
keywords = ["playground"]
repository = "https://github.com/kristof-mattei/leetcode"

[lib]
path = "src/lib.rs"
test = true
crate-type = ["lib"]

[profile.dev]
debug = true

[profile.release]
debug = true

[profile.bench]
debug = true

[profile.test]
debug = true

[lints.clippy]
# don't stop from compiling / running
all = "warn"
cargo = "warn"

# this one is WAY too buggy
assigning_clones = { level = "allow", priority = 127 }

# general things we don't care about when writing code for points
# as the input is narrowly defined
cast_possible_truncation = { level = "allow", priority = 127 }
cast_possible_wrap = { level = "allow", priority = 127 }
cast_sign_loss = { level = "allow", priority = 127 }

# yea, this one is debatable
too_many_lines = { level = "allow", priority = 127 }

# this has 0 performance implications, the binding is compiled away, and it could cause issues
# when done blindly, plus it makes it harder to debug as you cannot put breakpoints on return
# values of functions (yet)
let_and_return = { level = "allow", priority = 127 }
# this one is debatable. continue is used in places to be explicit, and to guard against
# issues when refactoring
needless_continue = { level = "allow", priority = 127 }
# this one causes confusion when combining variables (`foo`) and
# dereferenced variables (`foo.bar`). The latter cannot be inlined
# so we don't inline anything
uninlined-format-args = { level = "allow", priority = 127 }

[lints.rust]
let_underscore_drop = { level = "deny", priority = 127 }
non_ascii_idents = { level = "deny", priority = 127 }
